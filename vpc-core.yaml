AWSTemplateFormatVersion: '2010-09-09'
Description: 'Base VPC (2AZ, public/private subnets, IGW, optional NAT, optional S3/DynamoDB Gateway Endpoints)'

Parameters:
  VpcCidr:
    Type: String
    Default: 10.10.0.0/16
  PublicSubnet1Cidr:
    Type: String
    Default: 10.10.0.0/20
  PublicSubnet2Cidr:
    Type: String
    Default: 10.10.16.0/20
  PrivateSubnet1Cidr:
    Type: String
    Default: 10.10.128.0/20
  PrivateSubnet2Cidr:
    Type: String
    Default: 10.10.144.0/20

  NatGateways:
    Type: Number
    Default: 0
    AllowedValues: [0,1,2]
    Description: 'Number of NAT Gateways (0=cost saving, 1=single, 2=HA)'

  CreateGatewayEndpoints:
    Type: String
    Default: 'true'
    AllowedValues: ['true','false']
    Description: 'Create S3/DynamoDB Gateway Endpoints for private subnets'

  Environment:
    Type: String
    Default: prod

Conditions:
  UseNat: !Not [!Equals [!Ref NatGateways, 0]]
  UseTwoNat: !Equals [!Ref NatGateways, 2]
  MakeGwEndpoints: !Equals [!Ref CreateGatewayEndpoints, 'true']

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - { Key: Name, Value: traffic-vpc }
        - { Key: Environment, Value: !Ref Environment }

  IGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags: [ { Key: Name, Value: traffic-igw } ]

  IGWAttach:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref IGW
      VpcId: !Ref VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet1Cidr
      MapPublicIpOnLaunch: true
      Tags: [ { Key: Name, Value: traffic-public-a } ]

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet2Cidr
      MapPublicIpOnLaunch: true
      Tags: [ { Key: Name, Value: traffic-public-b } ]

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '' ]
      CidrBlock: !Ref PrivateSubnet1Cidr
      Tags: [ { Key: Name, Value: traffic-private-a } ]

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs '' ]
      CidrBlock: !Ref PrivateSubnet2Cidr
      Tags: [ { Key: Name, Value: traffic-private-b } ]

  PublicRT:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags: [ { Key: Name, Value: traffic-public-rt } ]

  PublicRouteDefault:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRT
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IGW
    DependsOn: IGWAttach

  PublicAssoc1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRT
      SubnetId: !Ref PublicSubnet1

  PublicAssoc2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRT
      SubnetId: !Ref PublicSubnet2

  PrivateRTA:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags: [ { Key: Name, Value: traffic-private-rt-a } ]

  PrivateRTB:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags: [ { Key: Name, Value: traffic-private-rt-b } ]

  PrivateAssocA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRTA
      SubnetId: !Ref PrivateSubnet1

  PrivateAssocB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRTB
      SubnetId: !Ref PrivateSubnet2

  EipNat1:
    Condition: UseNat
    Type: AWS::EC2::EIP
    Properties: { Domain: vpc }

  NatGW1:
    Condition: UseNat
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt EipNat1.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags: [ { Key: Name, Value: traffic-nat-a } ]

  EipNat2:
    Condition: UseTwoNat
    Type: AWS::EC2::EIP
    Properties: { Domain: vpc }

  NatGW2:
    Condition: UseTwoNat
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt EipNat2.AllocationId
      SubnetId: !Ref PublicSubnet2
      Tags: [ { Key: Name, Value: traffic-nat-b } ]

  PrivateRouteA:
    Condition: UseNat
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRTA
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGW1

  PrivateRouteB:
    Condition: UseNat
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRTB
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !If [UseTwoNat, !Ref NatGW2, !Ref NatGW1]

  S3GatewayEndpoint:
    Condition: MakeGwEndpoints
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VPC
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.s3'
      VpcEndpointType: Gateway
      RouteTableIds: [ !Ref PrivateRTA, !Ref PrivateRTB ]

  DynamoDBGatewayEndpoint:
    Condition: MakeGwEndpoints
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VPC
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.dynamodb'
      VpcEndpointType: Gateway
      RouteTableIds: [ !Ref PrivateRTA, !Ref PrivateRTB ]

Outputs:
  VpcId:
    Value: !Ref VPC
    Export: { Name: traffic:VpcId }

  PublicSubnetIds:
    Value: !Join [",", [!Ref PublicSubnet1, !Ref PublicSubnet2]]
    Export: { Name: traffic:PublicSubnetIds }

  PrivateSubnetIds:
    Value: !Join [",", [!Ref PrivateSubnet1, !Ref PrivateSubnet2]]
    Export: { Name: traffic:PrivateSubnetIds }
